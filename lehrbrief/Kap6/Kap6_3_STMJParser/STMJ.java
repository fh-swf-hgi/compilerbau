/* Generated By:JJTree&JavaCC: Do not edit this line. STMJ.java */
    package Kap6.Kap6_3_STMJParser;

    import java.io.File;
    import java.io.FileReader;
    import java.io.IOException;
    import java.util.*;

    public class STMJ/*@bgen(jjtree)*/implements STMJTreeConstants, STMJConstants {/*@bgen(jjtree)*/
  protected JJTSTMJState jjtree = new JJTSTMJState();List<ErrorCompiler> errors = new LinkedList<ErrorCompiler>();

        public static void main(String[] args) throws IOException {
            STMJ parser = null;
            try {
                parser=new STMJ(new FileReader(
                        new File("Kap6/Kap6_3_STMJParser/Test.stmj")
                      ));
                try {
                    parser.compilationUnit();
                } catch (ParseException pe) {
                    parser.errors.add(new ErrorSyntax(null, pe.getMessage()));
                }
            } catch (TokenMgrError e) {
                parser.errors.add(new ErrorLex(null, e.getMessage()));
            }
            if (parser.errors.size()==0)
                ((SimpleNode)parser.jjtree.rootNode()).dump(">");
            for (ErrorCompiler error: parser.errors)
                System.out.println(error);
        }

  void skipTo(ParseException e, SimpleNode n) throws ParseException {
   Set<Integer> kindSet = new java.util.HashSet();
   kindSet.add(Class);
   kindSet.add(StringTemplate);
   kindSet.add(EOF);
   Token t;
   errors.add(new ErrorSyntax(n, e.getMessage()));
   do { t = getNextToken();
   } while (!kindSet.contains(t.kind));
  }

  final public void compilationUnit() throws ParseException {
                                                  /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case StringTemplate:
        case Class:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Class:
            classDecl();
            break;
          case StringTemplate:
            stringTemplateDecl();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        skipTo(e, jjtn000);
        }
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void stringTemplateDecl() throws ParseException {
                                                    /*@bgen(jjtree) StringTemplate */
    ASTStringTemplate jjtn000 = new ASTStringTemplate(JJTSTRINGTEMPLATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(StringTemplate);
      t = jj_consume_token(Identifier);
      jj_consume_token(StartStringTemplate);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case String:
        case Variable:
        case VariableWithSep:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        stringTemplateElement(jjtn000);
      }
      jj_consume_token(EndStringTemplate);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void stringTemplateElement(ASTStringTemplate st) throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case String:
      t = jj_consume_token(String);
                   st.add(new TemplateString(t.image));
      break;
    case Variable:
      t = jj_consume_token(Variable);
                       st.add(new TemplateVariable(t.image));
      break;
    case VariableWithSep:
      t = jj_consume_token(VariableWithSep);
                              st.add(new TemplateVariableSep(t.image));
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void classDecl() throws ParseException {
                                  /*@bgen(jjtree) Class */
    ASTClass jjtn000 = new ASTClass(JJTCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    boolean isPrivate = false;
    Node n = null;
    try {
      jj_consume_token(Class);
      t = jj_consume_token(Identifier);
      jj_consume_token(46);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Public:
        case Private:
        case Static:
        case Int:
        case VoidT:
        case DoubleT:
        case StringT:
        case BooleanT:
        case Identifier:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Public:
        case Private:
        case Static:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Public:
          case Private:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case Public:
              jj_consume_token(Public);
              break;
            case Private:
              jj_consume_token(Private);
                            isPrivate=true;
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          jj_consume_token(Static);
          type();
                       n = jjtree.popNode();
          methodDecl(n, isPrivate, true);
          break;
        default:
          jj_la1[8] = jj_gen;
          if (jj_2_2(2)) {
            type();
                             n = jjtree.popNode();
            if (jj_2_1(2)) {
              attributeDecl(n, isPrivate);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case Identifier:
                methodDecl(n, isPrivate, false);
                break;
              default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case Identifier:
              constructorDecl(isPrivate);
              break;
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      jj_consume_token(47);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void attributeDecl(Node n, boolean isPrivate) throws ParseException {
                                                                   /*@bgen(jjtree) Attribute */
    ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t, op;
    try {
    jjtree.pushNode(n); jjtn000.setPrivate(isPrivate);
      t = jj_consume_token(Identifier);
      jj_consume_token(48);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                         jjtn000.setName(t.image);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void methodDecl(Node n, boolean isPrivate, boolean isStatic) throws ParseException {
                                                                               /*@bgen(jjtree) Method */
    ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jjtn000.setStatic(isStatic); jjtree.pushNode(n); jjtn000.setPrivate(isPrivate);
      t = jj_consume_token(Identifier);
      jj_consume_token(49);
      parameterList();
      jj_consume_token(50);
      methodblock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void constructorDecl(boolean isPrivate) throws ParseException {
                                                               /*@bgen(jjtree) Constructor */
    ASTConstructor jjtn000 = new ASTConstructor(JJTCONSTRUCTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(Identifier);
      jj_consume_token(49);
      parameterList();
      jj_consume_token(50);
      methodblock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      jjtn000.setName(t.image); jjtn000.setPrivate(isPrivate);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void type() throws ParseException {
                                /*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      singleType();
      label_4:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(51);
        jj_consume_token(52);
                             jjtn000.incDimension();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void singleType() throws ParseException {
                                  /*@bgen(jjtree) Type */
    ASTType jjtn000 = new ASTType(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BooleanT:
        jj_consume_token(BooleanT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                   jjtn000.setKind(ASTType.AstTypes.BOOLEAN);
        break;
      case DoubleT:
        jj_consume_token(DoubleT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.setKind(ASTType.AstTypes.DOUBLE);
        break;
      case Int:
        jj_consume_token(Int);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setKind(ASTType.AstTypes.INT);
        break;
      case VoidT:
        jj_consume_token(VoidT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                  jjtn000.setKind(ASTType.AstTypes.VOID);
        break;
      case StringT:
        jj_consume_token(StringT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.setKind(ASTType.AstTypes.STRING);
        break;
      case Identifier:
        t = jj_consume_token(Identifier);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                         jjtn000.setKind(ASTType.AstTypes.USER); jjtn000.setName(t.image);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void parameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
    case VoidT:
    case DoubleT:
    case StringT:
    case BooleanT:
    case Identifier:
      parameter();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(53);
        parameter();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void parameter() throws ParseException {
                                      /*@bgen(jjtree) Parameter */
    ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      type();
      t = jj_consume_token(Identifier);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void block() throws ParseException {
                              /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(46);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case New:
        case Do:
        case While:
        case Return:
        case Int:
        case VoidT:
        case DoubleT:
        case StringT:
        case BooleanT:
        case BooleanLiteral:
        case Println:
        case Print:
        case StringLiteral:
        case CharLiteral:
        case IntegerLiteral:
        case DoubleLiteral:
        case IncOperator:
        case AddOperator:
        case NotOperator:
        case Identifier:
        case 46:
        case 48:
        case 49:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        if (jj_2_4(2)) {
          variableDecl();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case If:
          case New:
          case Do:
          case While:
          case Return:
          case BooleanLiteral:
          case Println:
          case Print:
          case StringLiteral:
          case CharLiteral:
          case IntegerLiteral:
          case DoubleLiteral:
          case IncOperator:
          case AddOperator:
          case NotOperator:
          case Identifier:
          case 46:
          case 48:
          case 49:
            statement();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void methodblock() throws ParseException {
                                          /*@bgen(jjtree) MethodBlock */
  ASTMethodBlock jjtn000 = new ASTMethodBlock(JJTMETHODBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(46);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case If:
        case New:
        case Do:
        case While:
        case Return:
        case Int:
        case VoidT:
        case DoubleT:
        case StringT:
        case BooleanT:
        case BooleanLiteral:
        case Println:
        case Print:
        case StringLiteral:
        case CharLiteral:
        case IntegerLiteral:
        case DoubleLiteral:
        case IncOperator:
        case AddOperator:
        case NotOperator:
        case Identifier:
        case 46:
        case 48:
        case 49:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        if (jj_2_5(2)) {
          variableDecl();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case If:
          case New:
          case Do:
          case While:
          case Return:
          case BooleanLiteral:
          case Println:
          case Print:
          case StringLiteral:
          case CharLiteral:
          case IntegerLiteral:
          case DoubleLiteral:
          case IncOperator:
          case AddOperator:
          case NotOperator:
          case Identifier:
          case 46:
          case 48:
          case 49:
            statement();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(47);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void variableDecl() throws ParseException {
                                        /*@bgen(jjtree) Variable */
    ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t, op;
    try {
      type();
      t = jj_consume_token(Identifier);
      jj_consume_token(48);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
                                 jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case New:
    case BooleanLiteral:
    case Println:
    case Print:
    case StringLiteral:
    case CharLiteral:
    case IntegerLiteral:
    case DoubleLiteral:
    case IncOperator:
    case AddOperator:
    case NotOperator:
    case Identifier:
    case 49:
      exprStatement();
      break;
    case 46:
      block();
      break;
    case If:
      ifStatement();
      break;
    case While:
      whileStatement();
      break;
    case Do:
      doWhileStatement();
      break;
    case Return:
      returnStatement();
      break;
    case 48:
                            ASTEmptyStatement jjtn001 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(48);
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtn001.jjtSetLastToken(getToken(0));
                            }
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exprStatement() throws ParseException {
                                              /*@bgen(jjtree) ExprStatement */
  ASTExprStatement jjtn000 = new ASTExprStatement(JJTEXPRSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      expr();
      jj_consume_token(48);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ifStatement() throws ParseException {
                                 /*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(If);
      jj_consume_token(49);
      expr();
      jj_consume_token(50);
      statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Else:
        jj_consume_token(Else);
        statement();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void whileStatement() throws ParseException {
                                       /*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(While);
      jj_consume_token(49);
      expr();
      jj_consume_token(50);
      statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void doWhileStatement() throws ParseException {
                                           /*@bgen(jjtree) DoWhile */
  ASTDoWhile jjtn000 = new ASTDoWhile(JJTDOWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(Do);
      statement();
      jj_consume_token(While);
      jj_consume_token(49);
      expr();
      jj_consume_token(50);
      jj_consume_token(48);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void returnStatement() throws ParseException {
                                         /*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(Return);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case New:
      case BooleanLiteral:
      case Println:
      case Print:
      case StringLiteral:
      case CharLiteral:
      case IntegerLiteral:
      case DoubleLiteral:
      case IncOperator:
      case AddOperator:
      case NotOperator:
      case Identifier:
      case 49:
        expr();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(48);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void expr() throws ParseException {
                                      /*@bgen(jjtree) #Assignment(> 1) */
    ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      logicalOrExpr();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AssignOperator:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        t = jj_consume_token(AssignOperator);
        logicalOrExpr();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void logicalOrExpr() throws ParseException {
                                            /*@bgen(jjtree) #Logical(> 1) */
    ASTLogical jjtn000 = new ASTLogical(JJTLOGICAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      logicalAndExpr();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OrOperator:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        t = jj_consume_token(OrOperator);
        logicalAndExpr();
                                                        jjtn000.addOperator(t.image);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void logicalAndExpr() throws ParseException {
                                             /*@bgen(jjtree) #Logical(> 1) */
    ASTLogical jjtn000 = new ASTLogical(JJTLOGICAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      compExpr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AndOperator:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        t = jj_consume_token(AndOperator);
        compExpr();
                                             jjtn000.addOperator(t.image);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void compExpr() throws ParseException {
                                    /*@bgen(jjtree) #Comp(> 1) */
    ASTComp jjtn000 = new ASTComp(JJTCOMP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      sum();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CompOperator:
        t = jj_consume_token(CompOperator);
        sum();
                                    jjtn000.setOperator(t.image);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void sum() throws ParseException {
                                     /*@bgen(jjtree) #Arithmetic(> 1) */
    ASTArithmetic jjtn000 = new ASTArithmetic(JJTARITHMETIC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      product();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AddOperator:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        t = jj_consume_token(AddOperator);
        product();
                                           jjtn000.addOperator(t.image);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void product() throws ParseException {
                                         /*@bgen(jjtree) #Arithmetic(> 1) */
    ASTArithmetic jjtn000 = new ASTArithmetic(JJTARITHMETIC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      sign();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MultOperator:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_12;
        }
        t = jj_consume_token(MultOperator);
        sign();
                                      jjtn000.addOperator(t.image);
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case New:
    case BooleanLiteral:
    case Println:
    case Print:
    case StringLiteral:
    case CharLiteral:
    case IntegerLiteral:
    case DoubleLiteral:
    case Identifier:
    case 49:
      atom();
      break;
    case IncOperator:
      preInc();
      break;
    case NotOperator:
      notOp();
      break;
    case AddOperator:
      signOp();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void signOp() throws ParseException {
                              /*@bgen(jjtree) Sign */
    ASTSign jjtn000 = new ASTSign(JJTSIGN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(AddOperator);
      sign();
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                           jjtn000.setOperator(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void notOp() throws ParseException {
                            /*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NotOperator);
      sign();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void preInc() throws ParseException {
                             /*@bgen(jjtree) Pre */
    ASTPre jjtn000 = new ASTPre(JJTPRE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IncOperator);
      atom();
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                           jjtn000.operator=t.image;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void postInc(Node n) throws ParseException {
                                     /*@bgen(jjtree) Post */
    ASTPost jjtn000 = new ASTPost(JJTPOST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
    jjtree.pushNode(n);
      t = jj_consume_token(IncOperator);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.setOperator(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void atom() throws ParseException {
    Node n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case New:
      newOp();
      break;
    case Println:
    case Print:
    case Identifier:
      methodCallOrVariableUse(null);
      break;
    case 49:
      jj_consume_token(49);
      expr();
      jj_consume_token(50);
      break;
    case BooleanLiteral:
    case StringLiteral:
    case CharLiteral:
    case IntegerLiteral:
    case DoubleLiteral:
      literal();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = jjtree.popNode();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 54:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        deReferenz(n);
                    n=jjtree.popNode();
        break;
      case 51:
        arrayAcc(n);
                                                          n=jjtree.popNode();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                                     jjtree.pushNode(n);
  }

  final public void arrayAcc(Node n) throws ParseException {
                                          /*@bgen(jjtree) ArrayAcc */
  ASTArrayAcc jjtn000 = new ASTArrayAcc(JJTARRAYACC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtree.pushNode(n);
      jj_consume_token(51);
      expr();
      jj_consume_token(52);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void deReferenz(Node n) throws ParseException {
                                         /*@bgen(jjtree) Deref */
  ASTDeref jjtn000 = new ASTDeref(JJTDEREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
    jjtree.pushNode(n);
      jj_consume_token(54);
      methodCallOrVariableUse(n);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void methodCallOrVariableUse(Node n) throws ParseException {
    Token t;
    if (jj_2_6(2)) {
      methodCall(n);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identifier:
        variableUse(n);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void variableUse(Node n) throws ParseException {
                                                /*@bgen(jjtree) VariableUse */
    ASTVariableUse jjtn000 = new ASTVariableUse(JJTVARIABLEUSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(Identifier);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
                      jjtn000.setDeref(n); jjtn000.setName(t.image);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void methodCall(Node n) throws ParseException {
                                              /*@bgen(jjtree) MethodCall */
    ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identifier:
        t = jj_consume_token(Identifier);
        break;
      case Println:
        t = jj_consume_token(Println);
        break;
      case Print:
        t = jj_consume_token(Print);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(49);
      argumentList();
      jj_consume_token(50);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setName(t.image); jjtn000.setDeref(n);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void literal() throws ParseException {
                                  /*@bgen(jjtree) Literal */
    ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BooleanLiteral:
        t = jj_consume_token(BooleanLiteral);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                       jjtn000.setKind(ASTType.AstTypes.BOOLEAN); jjtn000.setContent(t.image);
        break;
      case DoubleLiteral:
        t = jj_consume_token(DoubleLiteral);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                        jjtn000.setKind(ASTType.AstTypes.DOUBLE); jjtn000.setContent(t.image);
        break;
      case CharLiteral:
        t = jj_consume_token(CharLiteral);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                       jjtn000.setKind(ASTType.AstTypes.CHAR); jjtn000.setContent(t.image);
        break;
      case IntegerLiteral:
        t = jj_consume_token(IntegerLiteral);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                         jjtn000.setKind(ASTType.AstTypes.INT); jjtn000.setContent(t.image);
        break;
      case StringLiteral:
        t = jj_consume_token(StringLiteral);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
                        jjtn000.setKind(ASTType.AstTypes.STRING); jjtn000.setContent(t.image);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void newOp() throws ParseException {
    Node n;
    jj_consume_token(New);
    singleType();
                         n = jjtree.popNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      newArray(n);
      break;
    case 49:
      newObject(n);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void newObject(Node n) throws ParseException {
                                      /*@bgen(jjtree) New */
  ASTNew jjtn000 = new ASTNew(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtree.pushNode(n);
      jj_consume_token(49);
      argumentList();
      jj_consume_token(50);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void newArray(Node n) throws ParseException {
                                          /*@bgen(jjtree) NewArray */
  ASTNewArray jjtn000 = new ASTNewArray(JJTNEWARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtree.pushNode(n);
      jj_consume_token(51);
      expr();
      jj_consume_token(52);
      label_14:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(51);
        expr();
        jj_consume_token(52);
                                      jjtn000.incResDim();
      }
      label_15:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(51);
        jj_consume_token(52);
                             jjtn000.incUnresDim();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void argumentList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case New:
    case BooleanLiteral:
    case Println:
    case Print:
    case StringLiteral:
    case CharLiteral:
    case IntegerLiteral:
    case DoubleLiteral:
    case IncOperator:
    case AddOperator:
    case NotOperator:
    case Identifier:
    case 49:
      expr();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_16;
        }
        jj_consume_token(53);
        expr();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(BooleanT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(IncOperator)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(NotOperator)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(AddOperator)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(Identifier)) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(New)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(CharLiteral)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(BooleanLiteral)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(Identifier)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(StringT)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(VoidT)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(Int)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(DoubleT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public STMJTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x180,0x180,0x0,0x0,0x2fe00,0x600,0x600,0x0,0xe00,0x0,0x2f000,0x0,0x2f000,0x977ef07a,0x977c007a,0x977ef07a,0x977c007a,0x977c007a,0x4,0x977c0008,0x0,0x40000000,0x20000000,0x0,0x10000000,0x8000000,0x977c0008,0x37c0008,0x0,0x0,0x0,0x180000,0x3640000,0x0,0x0,0x977c0008,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1c00,0x1c00,0x4,0x0,0x0,0x4,0x0,0x4,0x4,0x200000,0x4,0x34004,0x34004,0x34004,0x34004,0x34004,0x0,0x20004,0x2,0x0,0x0,0x1,0x0,0x0,0x20004,0x20004,0x480000,0x480000,0x4,0x4,0x0,0xa0000,0x200000,0x20004,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public STMJ(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public STMJ(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new STMJTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public STMJ(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new STMJTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public STMJ(STMJTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(STMJTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
